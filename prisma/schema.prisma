// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Gender {
  Male
  Female
}

enum Role {
  user
  admin
}

enum QuestionType {
  mcq
  open_ended
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id          String       @id @default(cuid())
  name        String?
  email       String?      @unique
  password    String
  role        Role         @default(user)
  dateOfBirth DateTime?
  gender      Gender?
  department  String?
  games       UserGame[]
  sessions    Session[]
  UserAnswer  UserAnswer[]
}

model Game {
  id        String     @id @default(cuid())
  name      String
  questions Question[]
  users     UserGame[] // Menggunakan UserGame untuk menangani many-to-many relationship
  token     String
  duration  Int        @default(0)
}

model UserGame {
  userId         String
  gameId         String
  timeStarted    DateTime
  timeEnded      DateTime?
  isGameOver     Boolean?
  questionNumber Int?
  score          Int?

  user User @relation(fields: [userId], references: [id])
  game Game @relation(fields: [gameId], references: [id])

  @@id([userId, gameId])
  @@index([userId])
  @@index([gameId])
  @@index([userId, gameId])
}

model Question {
  id           String       @id @default(cuid())
  question     String
  answer       String
  gameId       String
  options      Json? // for mcq questions
  questionType QuestionType
  userAnswers  UserAnswer[]

  game Game @relation(fields: [gameId], references: [id])

  @@index([gameId])
}

model UserAnswer {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  answer     String
  isCorrect  Boolean?

  user     User     @relation(fields: [userId], references: [id])
  question Question @relation(fields: [questionId], references: [id])

  @@index([userId])
  @@index([questionId])
  @@index([userId, questionId])
}
